% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/stay.R
\name{count_stay}
\alias{count_stay}
\title{Count Unique Stay Days Within Groups}
\usage{
count_stay(df, id_var, group_var, from_var, to_var)
}
\arguments{
\item{df}{A data.frame containing the date ranges.}

\item{id_var}{One or more columns identifying the main ID (bare names).}

\item{group_var}{Additional grouping column(s) nested within each ID (bare names).}

\item{from_var}{Start date column (bare name). Must be of class \code{Date}.}

\item{to_var}{End date column (bare name). Must be of class \code{Date}.}
}
\value{
A \code{data.table} with one row per \verb{(id_var, group_var)} combination,
containing the number of \strong{unique days} spanned by the given date ranges.
}
\description{
Computes the total number of \strong{unique days} covered by overlapping or
adjacent date ranges, grouped by one or more ID and group variables.
Unlike a simple sum of durations, overlapping ranges are counted only once.
}
\details{
Internally, this function calls a C backend (\code{CountStay}) for efficiency.
\itemize{
\item Input is internally sorted by \code{id_var}, \code{group_var}, \code{from_var}, \code{to_var}.
\item Dates are treated as \strong{inclusive}; each \code{from_var} and \code{to_var} is counted.
\item Overlapping or adjacent ranges do not double-count days.
\item The implementation is optimized for \strong{data.table} usage and its use is
recommended for best performance, though any data.frame will work.
}
}
\examples{
\donttest{
dt <- data.frame(
  id    = c(1, 1, 1, 2, 2, 2),
  group = c("a", "a", "a", "b", "b", "c"),
  from  = as.Date(c("2024-01-01", "2023-12-27", "2024-01-03",
                    "2024-02-01", "2024-02-05", "2025-02-05")),
  to    = as.Date(c("2024-01-07", "2025-01-05", "2025-01-07",
                    "2024-02-03", "2024-02-06", "2025-02-06"))
)

count_stay(dt, id, group, from, to)
#   id group stay
# 1  1     a  378
# 2  2     b    5
# 3  2     c    2
}

}
