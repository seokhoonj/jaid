% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/capture.R
\name{capture_names}
\alias{capture_names}
\title{Capture and normalize column specifications into names}
\usage{
capture_names(data, cols)
}
\arguments{
\item{data}{A data frame (or tibble/data.table) whose column names are
used for validation.}

\item{cols}{Column specification. Can be:
\itemize{
\item A character vector of column names (e.g. \code{c("x", "y")}).
\item A numeric vector of indices (e.g. \code{c(1, 3)}).
\item A variable holding one of the above.
\item A non-standard expression such as \code{c(x, y)} or \code{.(x, y)}.
}}
}
\value{
A character vector of column names (guaranteed to exist in \code{data}).
Returns \code{character(0)} if the input is \code{NULL} or not supplied.
}
\description{
Handles both \emph{standard evaluation} (character vectors, numeric indices,
variables containing them) and \emph{non-standard evaluation} (bare symbols,
calls like \code{c(a, b)} or \code{.(a, b)}). It ensures that only valid column
names are returned.
}
\details{
This helper function accepts flexible column specifications and resolves
them into a character vector of valid column names from a data frame.
\itemize{
\item When used \strong{inside another function}, make sure to capture and unquote
the argument with \code{!!rlang::enquo(x)} before passing to \code{capture_names()}.
For example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{f <- function(data, cols) \{
  capture_names(data, !!rlang::enquo(cols))
\}
}\if{html}{\out{</div>}}
}
}
\examples{
\donttest{
# Character vector
capture_names(iris, c("Sepal.Length", "Petal.Width"))

# Numeric indices
capture_names(iris, c(1, 4))

# Variable holding names
cols_vec <- c("Sepal.Length", "Petal.Width")
capture_names(iris, cols_vec)

# Bare symbols
capture_names(iris, c(Sepal.Length, Petal.Width))

# data.table style
capture_names(iris, .(Sepal.Length, Petal.Width))

# Wrappers: safe through multiple layers of NSE
f1 <- function(data, x) {x <- rlang::enquo(x); capture_names(data, !!x)}
f2 <- function(data, y) {y <- rlang::enquo(y); f1(data, !!y)}
f3 <- function(data, z) {z <- rlang::enquo(z); f2(data, !!z)}

cols_vec <- c("Sepal.Length", "Petal.Width")

f1(iris, c("Sepal.Length", "Petal.Width"))
f1(iris, c(Sepal.Length, Petal.Width))
f1(iris, cols_vec)
f2(iris, c("Sepal.Length", "Petal.Width"))
f2(iris, c(Sepal.Length, Petal.Width))
f2(iris, cols_vec)
f3(iris, c("Sepal.Length", "Petal.Width"))
f3(iris, c(Sepal.Length, Petal.Width))
f3(iris, cols_vec)
}

}
