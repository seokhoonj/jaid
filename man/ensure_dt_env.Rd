% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ensure.R
\name{ensure_dt_env}
\alias{ensure_dt_env}
\title{Ensure a data.table execution environment}
\usage{
ensure_dt_env(x)
}
\arguments{
\item{x}{A data.table, data.frame, or tibble.}
}
\value{
A list with three components (an "execution environment"):
\item{dt}{A data.table object (safe to modify).}
\item{restore}{A function that restores \code{dt} to the original input class.}
\item{inplace}{Logical flag: \code{TRUE} if input was already a data.table
(modified in place), \code{FALSE} otherwise.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Provides a lightweight "environment object" for safely using
data.table operations, regardless of whether the input is a
base data.frame, a tibble, or already a data.table.
\itemize{
\item If the input is a data.table, it is returned as-is and can
be modified in place.
\item If the input is a data.frame or tibble, a \strong{copy} is made,
converted to a data.table, and returned. A \code{restore()} function
is provided to convert the result back to the original class.
}

This helper is intended for package functions that rely on
in-place data.table semantics while respecting the user's
original data type.
}
\examples{
\donttest{
df <- data.frame(x = 1:3, y = 4:6)
env <- ensure_dt_env(df)
dt <- env$dt
dt[, z := x + y]      # in-place modification
env$restore(dt)       # back to data.frame
}
\dontrun{
tb <- tibble(a = 1:2, b = 3:4)
env2 <- ensure_dt_env(tb)
dt2 <- env2$dt
dt2[, c := a * b]
env2$restore(dt2)     # back to tibble
}

}
